// Code generated by sqlc. DO NOT EDIT.
// source: url.sql

package db

import (
	"context"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (id, user_id, short_url, long_url)
VALUES ($1, $2, $3, $4)
RETURNING id, short_url, long_url, created_at, user_id
`

type CreateUrlParams struct {
	ID       int64  `json:"id"`
	UserID   int64  `json:"user_id"`
	ShortUrl string `json:"short_url"`
	LongUrl  string `json:"long_url"`
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createUrl,
		arg.ID,
		arg.UserID,
		arg.ShortUrl,
		arg.LongUrl,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const getUrlByLong = `-- name: GetUrlByLong :one
SELECT id, short_url, long_url, created_at, user_id
FROM urls
WHERE long_url = $1
LIMIT 1
`

func (q *Queries) GetUrlByLong(ctx context.Context, longUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getUrlByLong, longUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const getUrlByShort = `-- name: GetUrlByShort :one
SELECT id, short_url, long_url, created_at, user_id
FROM urls
WHERE short_url = $1
LIMIT 1
`

func (q *Queries) GetUrlByShort(ctx context.Context, shortUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getUrlByShort, shortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}
