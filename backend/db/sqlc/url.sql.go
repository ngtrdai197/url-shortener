// Code generated by sqlc. DO NOT EDIT.
// source: url.sql

package db

import (
	"context"
	"database/sql"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (id, user_id, short_url, long_url, description)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, short_url, long_url, created_at, user_id, description
`

type CreateUrlParams struct {
	ID          int64          `json:"id"`
	UserID      int64          `json:"user_id"`
	ShortUrl    string         `json:"short_url"`
	LongUrl     string         `json:"long_url"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createUrl,
		arg.ID,
		arg.UserID,
		arg.ShortUrl,
		arg.LongUrl,
		arg.Description,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.CreatedAt,
		&i.UserID,
		&i.Description,
	)
	return i, err
}

const getCountURLs = `-- name: GetCountURLs :one
SELECT COUNT(1)
FROM urls
`

func (q *Queries) GetCountURLs(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCountURLs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getListURLs = `-- name: GetListURLs :many
SELECT id, short_url, long_url, created_at, user_id, description
FROM urls
WHERE user_id = $1
ORDER BY id DESC
LIMIT $2
OFFSET $3
`

type GetListURLsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetListURLs(ctx context.Context, arg GetListURLsParams) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getListURLs, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Url{}
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.ShortUrl,
			&i.LongUrl,
			&i.CreatedAt,
			&i.UserID,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUrlByLong = `-- name: GetUrlByLong :one
SELECT id, short_url, long_url, created_at, user_id, description
FROM urls
WHERE long_url = $1
LIMIT 1
`

func (q *Queries) GetUrlByLong(ctx context.Context, longUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getUrlByLong, longUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.CreatedAt,
		&i.UserID,
		&i.Description,
	)
	return i, err
}

const getUrlByShort = `-- name: GetUrlByShort :one
SELECT id, short_url, long_url, created_at, user_id, description
FROM urls
WHERE short_url = $1
LIMIT 1
`

func (q *Queries) GetUrlByShort(ctx context.Context, shortUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getUrlByShort, shortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.CreatedAt,
		&i.UserID,
		&i.Description,
	)
	return i, err
}
